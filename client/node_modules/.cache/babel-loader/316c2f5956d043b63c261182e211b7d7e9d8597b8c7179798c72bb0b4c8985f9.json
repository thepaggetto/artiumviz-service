{"ast":null,"code":"var _jsxFileName = \"/Users/thepaggetto/artiumviz-service/client/src/components/OutputPage.js\",\n  _s = $RefreshSig$();\n// client/src/components/OutputPage.js\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport './OutputPage.css';\n\n// SMPTE Color Constants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SMPTE_COLORS = {\n  WHITE: '#FFFFFF',\n  YELLOW: '#FFFF00',\n  CYAN: '#00FFFF',\n  GREEN: '#00FF00',\n  MAGENTA: '#FF00FF',\n  RED: '#FF0000',\n  BLUE: '#0000FF',\n  BLACK: '#000000'\n};\nconst OutputPage = ({\n  settings,\n  socket\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const animationRef = useRef(null);\n  const [width, setWidth] = useState(1920);\n  const [height, setHeight] = useState(1080);\n  const [frameCount, setFrameCount] = useState(0);\n  const [blinkState, setBlinkState] = useState(false);\n  const [localSettings, setLocalSettings] = useState(settings);\n  const logoRef = useRef(new Image());\n\n  // Update settings when they change from props or socket\n  useEffect(() => {\n    setLocalSettings(settings);\n  }, [settings]);\n\n  // Set up socket event listeners\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('settings-update', updatedSettings => {\n      setLocalSettings(updatedSettings);\n    });\n    return () => {\n      socket.off('settings-update');\n    };\n  }, [socket]);\n\n  // Parse resolution and set canvas dimensions\n  useEffect(() => {\n    if (localSettings && localSettings.resolution) {\n      const [w, h] = localSettings.resolution.split('x').map(Number);\n      setWidth(w);\n      setHeight(h);\n    }\n  }, [localSettings]);\n\n  // Load logo image if it exists\n  useEffect(() => {\n    if (localSettings && localSettings.logo) {\n      logoRef.current = new Image();\n      logoRef.current.src = localSettings.logo;\n    }\n  }, [localSettings]);\n\n  // Blink effect for sync indicator\n  useEffect(() => {\n    const blinkInterval = setInterval(() => {\n      setBlinkState(prev => !prev);\n    }, 1000);\n    return () => {\n      clearInterval(blinkInterval);\n    };\n  }, []);\n\n  // Format timecode based on frame rate\n  const formatTimecode = useCallback(() => {\n    if (!localSettings) return '00:00:00:00';\n    const now = new Date();\n    const hours = now.getHours().toString().padStart(2, '0');\n    const minutes = now.getMinutes().toString().padStart(2, '0');\n    const seconds = now.getSeconds().toString().padStart(2, '0');\n    const frameRate = parseFloat(localSettings.frameRate);\n    const frames = Math.floor(now.getMilliseconds() / 1000 * frameRate).toString().padStart(2, '0');\n    return `${hours}:${minutes}:${seconds}:${frames}`;\n  }, [localSettings]);\n\n  // Format frame count\n  const formatFrameCount = useCallback(() => {\n    return frameCount.toString().padStart(8, '0');\n  }, [frameCount]);\n\n  // Draw standard SMPTE color bars\n  const drawColorBars = useCallback((ctx, w, h) => {\n    const barWidth = w / 7;\n    const colorOrder = [SMPTE_COLORS.WHITE, SMPTE_COLORS.YELLOW, SMPTE_COLORS.CYAN, SMPTE_COLORS.GREEN, SMPTE_COLORS.MAGENTA, SMPTE_COLORS.RED, SMPTE_COLORS.BLUE];\n\n    // Draw main color bars (top 2/3)\n    const upperHeight = h * 0.67;\n    for (let i = 0; i < colorOrder.length; i++) {\n      ctx.fillStyle = colorOrder[i];\n      ctx.fillRect(i * barWidth, 0, barWidth, upperHeight);\n    }\n\n    // Draw bottom bars\n    const lowerHeight = h - upperHeight;\n\n    // Blue bars\n    ctx.fillStyle = SMPTE_COLORS.BLUE;\n    ctx.fillRect(0, upperHeight, barWidth, lowerHeight);\n    ctx.fillRect(3 * barWidth, upperHeight, barWidth, lowerHeight);\n    ctx.fillRect(6 * barWidth, upperHeight, barWidth, lowerHeight);\n\n    // Black bars\n    ctx.fillStyle = SMPTE_COLORS.BLACK;\n    ctx.fillRect(1 * barWidth, upperHeight, barWidth, lowerHeight);\n    ctx.fillRect(5 * barWidth, upperHeight, barWidth, lowerHeight);\n\n    // Magenta bar\n    ctx.fillStyle = SMPTE_COLORS.MAGENTA;\n    ctx.fillRect(2 * barWidth, upperHeight, barWidth, lowerHeight);\n\n    // Cyan bar\n    ctx.fillStyle = SMPTE_COLORS.CYAN;\n    ctx.fillRect(4 * barWidth, upperHeight, barWidth, lowerHeight);\n  }, []);\n\n  // Draw center circle for alignment\n  const drawCenterCircle = useCallback((ctx, w, h) => {\n    const centerX = w / 2;\n    const centerY = h / 2;\n    const radius = Math.min(w, h) * 0.05;\n    ctx.strokeStyle = SMPTE_COLORS.WHITE;\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n    ctx.stroke();\n\n    // Inner crosshair\n    ctx.beginPath();\n    ctx.moveTo(centerX - radius, centerY);\n    ctx.lineTo(centerX + radius, centerY);\n    ctx.moveTo(centerX, centerY - radius);\n    ctx.lineTo(centerX, centerY + radius);\n    ctx.stroke();\n  }, []);\n\n  // Draw pulsing sync indicator\n  const drawSyncIndicator = useCallback((ctx, w, h) => {\n    const size = Math.min(w, h) * 0.03;\n    const padding = 20;\n\n    // Alternate between white and red\n    ctx.fillStyle = blinkState ? SMPTE_COLORS.RED : SMPTE_COLORS.WHITE;\n    ctx.fillRect(padding, padding, size, size);\n\n    // Add border\n    ctx.strokeStyle = SMPTE_COLORS.WHITE;\n    ctx.lineWidth = 1;\n    ctx.strokeRect(padding, padding, size, size);\n  }, [blinkState]);\n\n  // Draw frame counter\n  const drawFrameCounter = useCallback((ctx, w, h) => {\n    const padding = 50;\n    const fontSize = Math.min(w, h) * 0.025;\n    ctx.font = `bold ${fontSize}px monospace`;\n    ctx.fillStyle = SMPTE_COLORS.WHITE;\n    ctx.textBaseline = 'top';\n    ctx.fillText(`Frame: ${formatFrameCount()}`, padding, h - padding - fontSize * 2);\n  }, [formatFrameCount]);\n\n  // Draw timecode display\n  const drawTimecode = useCallback((ctx, w, h) => {\n    const padding = 20;\n    const fontSize = Math.min(w, h) * 0.035;\n    ctx.font = `bold ${fontSize}px monospace`;\n    ctx.fillStyle = SMPTE_COLORS.WHITE;\n    ctx.textBaseline = 'top';\n    ctx.fillText(formatTimecode(), padding, h - padding - fontSize);\n  }, [formatTimecode]);\n\n  // Draw information box\n  const drawInfoBox = useCallback((ctx, w, h) => {\n    if (!localSettings) return;\n    const boxWidth = w * 0.25;\n    const boxHeight = h * 0.18;\n    const padding = 20;\n    const cornerRadius = 10;\n    const fontSize = Math.min(w, h) * 0.015;\n    const lineHeight = fontSize * 1.4;\n\n    // Box position (top right)\n    const boxX = w - boxWidth - padding;\n    const boxY = padding;\n\n    // Draw semi-transparent background\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n    ctx.strokeStyle = SMPTE_COLORS.WHITE;\n    ctx.lineWidth = 2;\n\n    // Rounded rectangle\n    ctx.beginPath();\n    ctx.moveTo(boxX + cornerRadius, boxY);\n    ctx.lineTo(boxX + boxWidth - cornerRadius, boxY);\n    ctx.arc(boxX + boxWidth - cornerRadius, boxY + cornerRadius, cornerRadius, Math.PI * 1.5, 0);\n    ctx.lineTo(boxX + boxWidth, boxY + boxHeight - cornerRadius);\n    ctx.arc(boxX + boxWidth - cornerRadius, boxY + boxHeight - cornerRadius, cornerRadius, 0, Math.PI * 0.5);\n    ctx.lineTo(boxX + cornerRadius, boxY + boxHeight);\n    ctx.arc(boxX + cornerRadius, boxY + boxHeight - cornerRadius, cornerRadius, Math.PI * 0.5, Math.PI);\n    ctx.lineTo(boxX, boxY + cornerRadius);\n    ctx.arc(boxX + cornerRadius, boxY + cornerRadius, cornerRadius, Math.PI, Math.PI * 1.5);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n\n    // Draw title\n    ctx.font = `bold ${fontSize * 1.2}px sans-serif`;\n    ctx.fillStyle = SMPTE_COLORS.WHITE;\n    ctx.textBaseline = 'top';\n    ctx.fillText(localSettings.title, boxX + 10, boxY + 10);\n\n    // Draw channel\n    ctx.font = `${fontSize}px sans-serif`;\n    ctx.fillText(localSettings.channel, boxX + 10, boxY + 10 + lineHeight);\n\n    // Draw technical specs\n    ctx.fillText(`Resolution: ${localSettings.resolution}`, boxX + 10, boxY + 10 + lineHeight * 3);\n    ctx.fillText(`Frame Rate: ${localSettings.frameRate} fps`, boxX + 10, boxY + 10 + lineHeight * 4);\n    ctx.fillText(`Scan Mode: ${localSettings.scanMode}`, boxX + 10, boxY + 10 + lineHeight * 5);\n    ctx.fillText(`Color Space: ${localSettings.colorSpace}`, boxX + 10, boxY + 10 + lineHeight * 6);\n\n    // Draw notes if available\n    if (localSettings.notes) {\n      ctx.fillText(`Notes: ${localSettings.notes}`, boxX + 10, boxY + 10 + lineHeight * 8);\n    }\n  }, [localSettings]);\n\n  // Draw logo\n  const drawLogo = useCallback((ctx, w, h) => {\n    const padding = 20;\n    const maxLogoWidth = w * 0.15;\n    const maxLogoHeight = h * 0.1;\n\n    // Calculate scaled dimensions while maintaining aspect ratio\n    const logoRatio = logoRef.current.width / logoRef.current.height;\n    let logoWidth, logoHeight;\n    if (logoRatio >= 1) {\n      // Wide logo\n      logoWidth = Math.min(maxLogoWidth, logoRef.current.width);\n      logoHeight = logoWidth / logoRatio;\n    } else {\n      // Tall logo\n      logoHeight = Math.min(maxLogoHeight, logoRef.current.height);\n      logoWidth = logoHeight * logoRatio;\n    }\n\n    // Position at bottom right corner\n    const logoX = w - logoWidth - padding;\n    const logoY = h - logoHeight - padding;\n\n    // Draw logo\n    ctx.drawImage(logoRef.current, logoX, logoY, logoWidth, logoHeight);\n  }, []);\n\n  // Main drawing function for the test card\n  const drawTestCard = useCallback(() => {\n    if (!canvasRef.current || !localSettings) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const w = canvas.width;\n    const h = canvas.height;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, w, h);\n    if (localSettings.alternateMode) {\n      // Draw alternate mode (black background with yellow square)\n      ctx.fillStyle = SMPTE_COLORS.BLACK;\n      ctx.fillRect(0, 0, w, h);\n\n      // Draw yellow square in top-right corner\n      const squareSize = Math.min(w, h) * 0.1;\n      ctx.fillStyle = SMPTE_COLORS.YELLOW;\n      ctx.fillRect(w - squareSize - 20, 20, squareSize, squareSize);\n    } else if (localSettings.showBars) {\n      // Draw SMPTE color bars\n      drawColorBars(ctx, w, h);\n    } else {\n      // Default background if no bars and not alternate mode\n      ctx.fillStyle = SMPTE_COLORS.BLACK;\n      ctx.fillRect(0, 0, w, h);\n    }\n\n    // Draw center circle for alignment\n    if (localSettings.showCenterCircle) {\n      drawCenterCircle(ctx, w, h);\n    }\n\n    // Draw sync indicator\n    if (localSettings.showSync) {\n      drawSyncIndicator(ctx, w, h);\n    }\n\n    // Draw frame counter\n    if (localSettings.showFrameCounter) {\n      drawFrameCounter(ctx, w, h);\n    }\n\n    // Draw timecode\n    if (localSettings.showTimecode) {\n      drawTimecode(ctx, w, h);\n    }\n\n    // Draw info box\n    if (localSettings.showInfoBox) {\n      drawInfoBox(ctx, w, h);\n    }\n\n    // Draw logo if available\n    if (localSettings.logo && logoRef.current.complete) {\n      drawLogo(ctx, w, h);\n    }\n  }, [localSettings, drawColorBars, drawCenterCircle, drawSyncIndicator, drawFrameCounter, drawTimecode, drawInfoBox, drawLogo]);\n\n  // Animation loop for continuous rendering\n  useEffect(() => {\n    let lastTimestamp = 0;\n    let frameCounter = 0;\n    const frameRate = localSettings !== null && localSettings !== void 0 && localSettings.frameRate ? parseFloat(localSettings.frameRate) : 25;\n    const frameTime = 1000 / frameRate; // ms per frame\n\n    const animate = timestamp => {\n      if (!lastTimestamp) lastTimestamp = timestamp;\n      const elapsed = timestamp - lastTimestamp;\n      if (elapsed >= frameTime) {\n        // Update frame counter\n        frameCounter++;\n        setFrameCount(frameCounter);\n\n        // Draw frame\n        drawTestCard();\n\n        // Update timestamp\n        lastTimestamp = timestamp - elapsed % frameTime;\n      }\n      animationRef.current = requestAnimationFrame(animate);\n    };\n    animationRef.current = requestAnimationFrame(animate);\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [localSettings, drawTestCard]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"output-page\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: width,\n      height: height,\n      className: \"test-card-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 396,\n    columnNumber: 5\n  }, this);\n};\n_s(OutputPage, \"HLYV4qAEpsWYHRfiyqxW7qIF5AM=\");\n_c = OutputPage;\nexport default OutputPage;\nvar _c;\n$RefreshReg$(_c, \"OutputPage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useCallback","jsxDEV","_jsxDEV","SMPTE_COLORS","WHITE","YELLOW","CYAN","GREEN","MAGENTA","RED","BLUE","BLACK","OutputPage","settings","socket","_s","canvasRef","animationRef","width","setWidth","height","setHeight","frameCount","setFrameCount","blinkState","setBlinkState","localSettings","setLocalSettings","logoRef","Image","on","updatedSettings","off","resolution","w","h","split","map","Number","logo","current","src","blinkInterval","setInterval","prev","clearInterval","formatTimecode","now","Date","hours","getHours","toString","padStart","minutes","getMinutes","seconds","getSeconds","frameRate","parseFloat","frames","Math","floor","getMilliseconds","formatFrameCount","drawColorBars","ctx","barWidth","colorOrder","upperHeight","i","length","fillStyle","fillRect","lowerHeight","drawCenterCircle","centerX","centerY","radius","min","strokeStyle","lineWidth","beginPath","arc","PI","stroke","moveTo","lineTo","drawSyncIndicator","size","padding","strokeRect","drawFrameCounter","fontSize","font","textBaseline","fillText","drawTimecode","drawInfoBox","boxWidth","boxHeight","cornerRadius","lineHeight","boxX","boxY","closePath","fill","title","channel","scanMode","colorSpace","notes","drawLogo","maxLogoWidth","maxLogoHeight","logoRatio","logoWidth","logoHeight","logoX","logoY","drawImage","drawTestCard","canvas","getContext","clearRect","alternateMode","squareSize","showBars","showCenterCircle","showSync","showFrameCounter","showTimecode","showInfoBox","complete","lastTimestamp","frameCounter","frameTime","animate","timestamp","elapsed","requestAnimationFrame","cancelAnimationFrame","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/thepaggetto/artiumviz-service/client/src/components/OutputPage.js"],"sourcesContent":["// client/src/components/OutputPage.js\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport './OutputPage.css';\n\n// SMPTE Color Constants\nconst SMPTE_COLORS = {\n  WHITE: '#FFFFFF',\n  YELLOW: '#FFFF00',\n  CYAN: '#00FFFF',\n  GREEN: '#00FF00',\n  MAGENTA: '#FF00FF',\n  RED: '#FF0000',\n  BLUE: '#0000FF',\n  BLACK: '#000000',\n};\n\nconst OutputPage = ({ settings, socket }) => {\n  const canvasRef = useRef(null);\n  const animationRef = useRef(null);\n  const [width, setWidth] = useState(1920);\n  const [height, setHeight] = useState(1080);\n  const [frameCount, setFrameCount] = useState(0);\n  const [blinkState, setBlinkState] = useState(false);\n  const [localSettings, setLocalSettings] = useState(settings);\n  const logoRef = useRef(new Image());\n\n  // Update settings when they change from props or socket\n  useEffect(() => {\n    setLocalSettings(settings);\n  }, [settings]);\n\n  // Set up socket event listeners\n  useEffect(() => {\n    if (!socket) return;\n\n    socket.on('settings-update', (updatedSettings) => {\n      setLocalSettings(updatedSettings);\n    });\n\n    return () => {\n      socket.off('settings-update');\n    };\n  }, [socket]);\n\n  // Parse resolution and set canvas dimensions\n  useEffect(() => {\n    if (localSettings && localSettings.resolution) {\n      const [w, h] = localSettings.resolution.split('x').map(Number);\n      setWidth(w);\n      setHeight(h);\n    }\n  }, [localSettings]);\n\n  // Load logo image if it exists\n  useEffect(() => {\n    if (localSettings && localSettings.logo) {\n      logoRef.current = new Image();\n      logoRef.current.src = localSettings.logo;\n    }\n  }, [localSettings]);\n\n  // Blink effect for sync indicator\n  useEffect(() => {\n    const blinkInterval = setInterval(() => {\n      setBlinkState(prev => !prev);\n    }, 1000);\n\n    return () => {\n      clearInterval(blinkInterval);\n    };\n  }, []);\n\n  // Format timecode based on frame rate\n  const formatTimecode = useCallback(() => {\n    if (!localSettings) return '00:00:00:00';\n    \n    const now = new Date();\n    const hours = now.getHours().toString().padStart(2, '0');\n    const minutes = now.getMinutes().toString().padStart(2, '0');\n    const seconds = now.getSeconds().toString().padStart(2, '0');\n    \n    const frameRate = parseFloat(localSettings.frameRate);\n    const frames = Math.floor((now.getMilliseconds() / 1000) * frameRate)\n      .toString()\n      .padStart(2, '0');\n    \n    return `${hours}:${minutes}:${seconds}:${frames}`;\n  }, [localSettings]);\n\n  // Format frame count\n  const formatFrameCount = useCallback(() => {\n    return frameCount.toString().padStart(8, '0');\n  }, [frameCount]);\n\n  // Draw standard SMPTE color bars\n  const drawColorBars = useCallback((ctx, w, h) => {\n    const barWidth = w / 7;\n    const colorOrder = [\n      SMPTE_COLORS.WHITE,\n      SMPTE_COLORS.YELLOW,\n      SMPTE_COLORS.CYAN,\n      SMPTE_COLORS.GREEN,\n      SMPTE_COLORS.MAGENTA,\n      SMPTE_COLORS.RED,\n      SMPTE_COLORS.BLUE\n    ];\n    \n    // Draw main color bars (top 2/3)\n    const upperHeight = h * 0.67;\n    for (let i = 0; i < colorOrder.length; i++) {\n      ctx.fillStyle = colorOrder[i];\n      ctx.fillRect(i * barWidth, 0, barWidth, upperHeight);\n    }\n    \n    // Draw bottom bars\n    const lowerHeight = h - upperHeight;\n    \n    // Blue bars\n    ctx.fillStyle = SMPTE_COLORS.BLUE;\n    ctx.fillRect(0, upperHeight, barWidth, lowerHeight);\n    ctx.fillRect(3 * barWidth, upperHeight, barWidth, lowerHeight);\n    ctx.fillRect(6 * barWidth, upperHeight, barWidth, lowerHeight);\n    \n    // Black bars\n    ctx.fillStyle = SMPTE_COLORS.BLACK;\n    ctx.fillRect(1 * barWidth, upperHeight, barWidth, lowerHeight);\n    ctx.fillRect(5 * barWidth, upperHeight, barWidth, lowerHeight);\n    \n    // Magenta bar\n    ctx.fillStyle = SMPTE_COLORS.MAGENTA;\n    ctx.fillRect(2 * barWidth, upperHeight, barWidth, lowerHeight);\n    \n    // Cyan bar\n    ctx.fillStyle = SMPTE_COLORS.CYAN;\n    ctx.fillRect(4 * barWidth, upperHeight, barWidth, lowerHeight);\n  }, []);\n  \n  // Draw center circle for alignment\n  const drawCenterCircle = useCallback((ctx, w, h) => {\n    const centerX = w / 2;\n    const centerY = h / 2;\n    const radius = Math.min(w, h) * 0.05;\n    \n    ctx.strokeStyle = SMPTE_COLORS.WHITE;\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n    ctx.stroke();\n    \n    // Inner crosshair\n    ctx.beginPath();\n    ctx.moveTo(centerX - radius, centerY);\n    ctx.lineTo(centerX + radius, centerY);\n    ctx.moveTo(centerX, centerY - radius);\n    ctx.lineTo(centerX, centerY + radius);\n    ctx.stroke();\n  }, []);\n  \n  // Draw pulsing sync indicator\n  const drawSyncIndicator = useCallback((ctx, w, h) => {\n    const size = Math.min(w, h) * 0.03;\n    const padding = 20;\n    \n    // Alternate between white and red\n    ctx.fillStyle = blinkState ? SMPTE_COLORS.RED : SMPTE_COLORS.WHITE;\n    ctx.fillRect(padding, padding, size, size);\n    \n    // Add border\n    ctx.strokeStyle = SMPTE_COLORS.WHITE;\n    ctx.lineWidth = 1;\n    ctx.strokeRect(padding, padding, size, size);\n  }, [blinkState]);\n  \n  // Draw frame counter\n  const drawFrameCounter = useCallback((ctx, w, h) => {\n    const padding = 50;\n    const fontSize = Math.min(w, h) * 0.025;\n    \n    ctx.font = `bold ${fontSize}px monospace`;\n    ctx.fillStyle = SMPTE_COLORS.WHITE;\n    ctx.textBaseline = 'top';\n    ctx.fillText(\n      `Frame: ${formatFrameCount()}`, \n      padding, \n      h - padding - fontSize * 2\n    );\n  }, [formatFrameCount]);\n  \n  // Draw timecode display\n  const drawTimecode = useCallback((ctx, w, h) => {\n    const padding = 20;\n    const fontSize = Math.min(w, h) * 0.035;\n    \n    ctx.font = `bold ${fontSize}px monospace`;\n    ctx.fillStyle = SMPTE_COLORS.WHITE;\n    ctx.textBaseline = 'top';\n    ctx.fillText(\n      formatTimecode(), \n      padding, \n      h - padding - fontSize\n    );\n  }, [formatTimecode]);\n  \n  // Draw information box\n  const drawInfoBox = useCallback((ctx, w, h) => {\n    if (!localSettings) return;\n    \n    const boxWidth = w * 0.25;\n    const boxHeight = h * 0.18;\n    const padding = 20;\n    const cornerRadius = 10;\n    const fontSize = Math.min(w, h) * 0.015;\n    const lineHeight = fontSize * 1.4;\n    \n    // Box position (top right)\n    const boxX = w - boxWidth - padding;\n    const boxY = padding;\n    \n    // Draw semi-transparent background\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n    ctx.strokeStyle = SMPTE_COLORS.WHITE;\n    ctx.lineWidth = 2;\n    \n    // Rounded rectangle\n    ctx.beginPath();\n    ctx.moveTo(boxX + cornerRadius, boxY);\n    ctx.lineTo(boxX + boxWidth - cornerRadius, boxY);\n    ctx.arc(boxX + boxWidth - cornerRadius, boxY + cornerRadius, cornerRadius, Math.PI * 1.5, 0);\n    ctx.lineTo(boxX + boxWidth, boxY + boxHeight - cornerRadius);\n    ctx.arc(boxX + boxWidth - cornerRadius, boxY + boxHeight - cornerRadius, cornerRadius, 0, Math.PI * 0.5);\n    ctx.lineTo(boxX + cornerRadius, boxY + boxHeight);\n    ctx.arc(boxX + cornerRadius, boxY + boxHeight - cornerRadius, cornerRadius, Math.PI * 0.5, Math.PI);\n    ctx.lineTo(boxX, boxY + cornerRadius);\n    ctx.arc(boxX + cornerRadius, boxY + cornerRadius, cornerRadius, Math.PI, Math.PI * 1.5);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n    \n    // Draw title\n    ctx.font = `bold ${fontSize * 1.2}px sans-serif`;\n    ctx.fillStyle = SMPTE_COLORS.WHITE;\n    ctx.textBaseline = 'top';\n    ctx.fillText(localSettings.title, boxX + 10, boxY + 10);\n    \n    // Draw channel\n    ctx.font = `${fontSize}px sans-serif`;\n    ctx.fillText(localSettings.channel, boxX + 10, boxY + 10 + lineHeight);\n    \n    // Draw technical specs\n    ctx.fillText(`Resolution: ${localSettings.resolution}`, boxX + 10, boxY + 10 + lineHeight * 3);\n    ctx.fillText(`Frame Rate: ${localSettings.frameRate} fps`, boxX + 10, boxY + 10 + lineHeight * 4);\n    ctx.fillText(`Scan Mode: ${localSettings.scanMode}`, boxX + 10, boxY + 10 + lineHeight * 5);\n    ctx.fillText(`Color Space: ${localSettings.colorSpace}`, boxX + 10, boxY + 10 + lineHeight * 6);\n    \n    // Draw notes if available\n    if (localSettings.notes) {\n      ctx.fillText(`Notes: ${localSettings.notes}`, boxX + 10, boxY + 10 + lineHeight * 8);\n    }\n  }, [localSettings]);\n  \n  // Draw logo\n  const drawLogo = useCallback((ctx, w, h) => {\n    const padding = 20;\n    const maxLogoWidth = w * 0.15;\n    const maxLogoHeight = h * 0.1;\n    \n    // Calculate scaled dimensions while maintaining aspect ratio\n    const logoRatio = logoRef.current.width / logoRef.current.height;\n    let logoWidth, logoHeight;\n    \n    if (logoRatio >= 1) {\n      // Wide logo\n      logoWidth = Math.min(maxLogoWidth, logoRef.current.width);\n      logoHeight = logoWidth / logoRatio;\n    } else {\n      // Tall logo\n      logoHeight = Math.min(maxLogoHeight, logoRef.current.height);\n      logoWidth = logoHeight * logoRatio;\n    }\n    \n    // Position at bottom right corner\n    const logoX = w - logoWidth - padding;\n    const logoY = h - logoHeight - padding;\n    \n    // Draw logo\n    ctx.drawImage(logoRef.current, logoX, logoY, logoWidth, logoHeight);\n  }, []);\n\n  // Main drawing function for the test card\n  const drawTestCard = useCallback(() => {\n    if (!canvasRef.current || !localSettings) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const w = canvas.width;\n    const h = canvas.height;\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, w, h);\n    \n    if (localSettings.alternateMode) {\n      // Draw alternate mode (black background with yellow square)\n      ctx.fillStyle = SMPTE_COLORS.BLACK;\n      ctx.fillRect(0, 0, w, h);\n      \n      // Draw yellow square in top-right corner\n      const squareSize = Math.min(w, h) * 0.1;\n      ctx.fillStyle = SMPTE_COLORS.YELLOW;\n      ctx.fillRect(w - squareSize - 20, 20, squareSize, squareSize);\n    } else if (localSettings.showBars) {\n      // Draw SMPTE color bars\n      drawColorBars(ctx, w, h);\n    } else {\n      // Default background if no bars and not alternate mode\n      ctx.fillStyle = SMPTE_COLORS.BLACK;\n      ctx.fillRect(0, 0, w, h);\n    }\n    \n    // Draw center circle for alignment\n    if (localSettings.showCenterCircle) {\n      drawCenterCircle(ctx, w, h);\n    }\n    \n    // Draw sync indicator\n    if (localSettings.showSync) {\n      drawSyncIndicator(ctx, w, h);\n    }\n    \n    // Draw frame counter\n    if (localSettings.showFrameCounter) {\n      drawFrameCounter(ctx, w, h);\n    }\n    \n    // Draw timecode\n    if (localSettings.showTimecode) {\n      drawTimecode(ctx, w, h);\n    }\n    \n    // Draw info box\n    if (localSettings.showInfoBox) {\n      drawInfoBox(ctx, w, h);\n    }\n    \n    // Draw logo if available\n    if (localSettings.logo && logoRef.current.complete) {\n      drawLogo(ctx, w, h);\n    }\n  }, [\n    localSettings, \n    drawColorBars, \n    drawCenterCircle, \n    drawSyncIndicator, \n    drawFrameCounter, \n    drawTimecode, \n    drawInfoBox, \n    drawLogo\n  ]);\n  \n  // Animation loop for continuous rendering\n  useEffect(() => {\n    let lastTimestamp = 0;\n    let frameCounter = 0;\n    const frameRate = localSettings?.frameRate ? parseFloat(localSettings.frameRate) : 25;\n    const frameTime = 1000 / frameRate; // ms per frame\n    \n    const animate = (timestamp) => {\n      if (!lastTimestamp) lastTimestamp = timestamp;\n      \n      const elapsed = timestamp - lastTimestamp;\n      \n      if (elapsed >= frameTime) {\n        // Update frame counter\n        frameCounter++;\n        setFrameCount(frameCounter);\n        \n        // Draw frame\n        drawTestCard();\n        \n        // Update timestamp\n        lastTimestamp = timestamp - (elapsed % frameTime);\n      }\n      \n      animationRef.current = requestAnimationFrame(animate);\n    };\n    \n    animationRef.current = requestAnimationFrame(animate);\n    \n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [localSettings, drawTestCard]);\n  \n  return (\n    <div className=\"output-page\">\n      <canvas\n        ref={canvasRef}\n        width={width}\n        height={height}\n        className=\"test-card-canvas\"\n      />\n    </div>\n  );\n};\n\nexport default OutputPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}